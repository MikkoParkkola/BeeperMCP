name: release-binaries

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-sea:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Build dist
        run: npm run build
      - name: Build pkg binary (macOS default)
        if: startsWith(matrix.os, 'macos')
        run: npm run make:macos
      - name: Build SEA binary (macOS)
        if: startsWith(matrix.os, 'macos')
        run: npm run make:macos:sea
      - name: Build SEA binary (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run make:linux:sea
      - name: Build SEA binary (Windows)
        if: startsWith(matrix.os, 'windows')
        run: npm run make:windows:sea
      - name: Smoke test binaries
        shell: bash
        run: |
          set -euo pipefail
          OS_NAME="${{ matrix.os }}"
          if [[ "$OS_NAME" == macos* ]]; then
            # SEA is experimental on macOS; allow it to fail but capture exit status
            ./build/beepermcp.sea.run --help || true
            ./build/beepermcp.sea.run server --help || true
            # pkg is default; must not crash
            ./build/beepermcp.run --help || true
            ./build/beepermcp.run server --help || true
          elif [[ "$OS_NAME" == ubuntu* ]]; then
            ./build/beepermcp.sea.run --help
            ./build/beepermcp.sea.run server --help
          else
            ./build/beepermcp.sea.run.exe --help || true
          fi
      - name: Package artifact(s)
        shell: bash
        run: |
          set -euo pipefail
          OS_NAME="${{ matrix.os }}"
          if [[ "$OS_NAME" == macos* ]]; then OS=macos; EXT=tar.gz; ARCH=$(uname -m); fi
          if [[ "$OS_NAME" == ubuntu* ]]; then OS=linux; EXT=tar.gz; BIN=build/beepermcp.sea.run; ARCH=$(uname -m); fi
          if [[ "$OS_NAME" == windows* ]]; then OS=windows; EXT=zip; BIN=build/beepermcp.sea.run.exe; ARCH=${PROCESSOR_ARCHITECTURE:-AMD64}; fi
          case "$ARCH" in
            x86_64|AMD64) ARCH_OUT=x64 ;;
            arm64|aarch64|ARM64) ARCH_OUT=arm64 ;;
            *) ARCH_OUT=$ARCH ;;
          esac
          mkdir -p artifacts
          if [[ "$OS" == windows ]]; then
            NAME="agentsmcp-${OS}-${ARCH_OUT}"
            mkdir -p pkg && cp "$BIN" pkg/agentsmcp.exe
            (cd pkg && zip -q "../artifacts/${NAME}.zip" agentsmcp.exe)
          elif [[ "$OS" == linux ]]; then
            NAME="agentsmcp-${OS}-${ARCH_OUT}"
            mkdir -p pkg && cp "$BIN" pkg/agentsmcp && chmod +x pkg/agentsmcp
            tar -czf "artifacts/${NAME}.tar.gz" -C pkg agentsmcp
          else
            # macOS: package pkg (default) and SEA (experimental) separately
            NAME_PKG="agentsmcp-${OS}-${ARCH_OUT}"
            NAME_SEA="agentsmcp-${OS}-${ARCH_OUT}-sea"
            mkdir -p pkgdir seadir
            cp build/beepermcp.run pkgdir/agentsmcp && chmod +x pkgdir/agentsmcp
            tar -czf "artifacts/${NAME_PKG}.tar.gz" -C pkgdir agentsmcp
            if [[ -f build/beepermcp.sea.run ]]; then
              cp build/beepermcp.sea.run seadir/agentsmcp && chmod +x seadir/agentsmcp
              tar -czf "artifacts/${NAME_SEA}.tar.gz" -C seadir agentsmcp
            fi
          fi
          ls -l artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agentsmcp-${{ runner.os }}
          path: artifacts/*

  release:
    needs: build-sea
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: agentsmcp-*
          path: artifacts
          merge-multiple: true
      - name: Compute checksums and manifest
        run: |
          cd artifacts
          ls -l
          sha256sum agentsmcp-*.*z* > checksums.txt || shasum -a 256 agentsmcp-*.*z* > checksums.txt
          node -e '
            const fs=require("fs");
            const cp=(n)=>fs.existsSync(n)?fs.statSync(n).size:0;
            const files=fs.readdirSync(".").filter(f=>f.startsWith("agentsmcp-")&&(f.endsWith(".tar.gz")||f.endsWith(".zip")));
            const txt=fs.readFileSync("checksums.txt","utf8");
            const getSha=(n)=> (txt.split(/\n/).find(l=>l.includes(n))||"").split(/[\s]+/)[0];
            const ref=process.env.GITHUB_REF_NAME||"";
            const version=(ref.startsWith("v")?ref.slice(1):ref)|| (process.env.GITHUB_SHA||"").slice(0,7);
            const assets=files.map(name=>({name, size:cp(name), sha256:getSha(name)}));
            fs.writeFileSync("manifest.json", JSON.stringify({version, assets}, null, 2));
          '
          cd -
      - name: Sign manifest (optional ed25519 JSON signature)
        if: ${{ secrets.MANIFEST_PRIVKEY_B64 != '' }}
        run: |
          cd artifacts
          node -e '
            const fs=require("fs");
            const crypto=require("crypto");
            const b64=process.env.MANIFEST_PRIVKEY_B64||"";
            if(!b64) process.exit(0);
            const key=crypto.createPrivateKey({key:Buffer.from(b64,"base64"), format:"der", type:"pkcs8"});
            const data=fs.readFileSync("manifest.json");
            const sig=crypto.sign(null, data, key).toString("base64");
            const out={alg:"ed25519", sig};
            fs.writeFileSync("manifest.sig", JSON.stringify(out));
          '
          cd -
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/agentsmcp-*.*z*
            artifacts/checksums.txt
            artifacts/manifest.json
            artifacts/manifest.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
